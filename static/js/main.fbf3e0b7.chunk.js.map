{"version":3,"sources":["function/getCookie.js","function/writeCookie.js","store/actions/index.js","components/SpeedLine/index.jsx","App.js","serviceWorker.js","store/reducers/app/updateTheme.js","store/reducers/app/index.js","store/reducers/index.js","store/index.js","i18n.js","index.js"],"names":["getCookie","name","parts","document","cookie","split","length","pop","shift","writeCookie","data","toString","primaryTheme","background","textColor","button","darkTheme","updateTheme","themeName","themeColors","type","index","canvas","getElementById","ctx","getContext","cw","width","window","innerWidth","ch","height","innerHeight","rand","min","max","Math","random","SpeedLine","x","y","this","speed","life","curLife","alpha","angle","PI","size","inRadius","outRadius","draw","save","translate","rotate","beginPath","moveTo","lineTo","closePath","fillStyle","fill","restore","lines","updateLines","forEach","line","i","update","animate","requestAnimationFrame","clearRect","addEventListener","id","Component","App","state","language","changeLanguage","setState","i18n","handleChangeTheme","props","changeTheme","readThemeCookie","now_language_cookie","getThemeSuccessfully","React","connect","setAppActive","app","active","dispatch","setApp","Boolean","location","hostname","match","initialState","reducers","combineReducers","action","createStore","composeWithDevTools","applyMiddleware","thunk","resources","en","translation","zhTW","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbf3e0b7.chunk.js","sourcesContent":["const getCookie = name => {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + name + '=');\n  if (parts.length === 2) {\n    return parts\n      .pop()\n      .split(';')\n      .shift();\n  }\n};\n\nexport default getCookie;\n","//name : type string\nconst writeCookie = (name, data) => {\n  document.cookie = name.toString() + '=' + data + ';path=/';\n  return;\n};\n\nexport default writeCookie;\n","import getCookie from \"../../function/getCookie\";\nimport writeCookie from \"../../function/writeCookie\";\n\n// 基本型\nexport const setApp = () => {\n  return {\n    type: \"SET_APP\"\n  };\n};\n\n// 呼叫其他 action 型\nexport const selectLv1Option = index => async dispatch => {\n  await dispatch(setApp(index));\n};\n\n// 執行多件 function 型\nexport const fetchProduct = cbu => async dispatch => {\n  fetch(`/shopping/v1/compositions/productDetails/info/${cbu}`, {\n    credentials: \"include\",\n    headers: { \"content-type\": \"application/json\" },\n    mode: \"cors\"\n  })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n};\n\nconst primaryTheme = {\n  background: \"#FFFFFF\",\n  textColor: \"#000000\",\n  button: \"red\"\n};\n\nconst darkTheme = {\n  background: \"#2F2F2F\",\n  textColor: \"#CCCCCC\",\n  button: \"darkred\"\n};\n\nexport const readThemeCookie = () => dispatch => {\n  // 更換網站介面顏色\n  const theme_cookie = getCookie(\"theme\");\n  if (!theme_cookie) {\n    // 1. 預設主題顏色為亮色\n    writeCookie(\"theme\", \"primary\");\n    const themeName = \"primary\";\n    const themeColors = primaryTheme;\n    dispatch(updateTheme(themeName, themeColors));\n  } else {\n    // 1. 抓取目前的主題顏色\n    const themeName = getCookie(\"theme\");\n    const themeColors = themeName === \"primary\" ? primaryTheme : darkTheme;\n    dispatch(updateTheme(themeName, themeColors));\n  }\n};\n\nexport const changeTheme = themeName => dispatch => {\n  if (themeName === \"primary\") {\n    const themeColors = primaryTheme;\n    writeCookie(\"theme\", themeName);\n    dispatch(updateTheme(themeName, themeColors));\n  } else {\n    const themeColors = darkTheme;\n    writeCookie(\"theme\", themeName);\n    dispatch(updateTheme(themeName, themeColors));\n  }\n};\n\nexport const updateTheme = (themeName, themeColors) => {\n  return {\n    type: \"UPDATE_THEME\",\n    themeName,\n    themeColors\n  };\n};\n","import React, { Component } from 'react'\n\nexport class index extends Component {\n    componentDidMount() {\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        let cw = canvas.width = window.innerWidth;\n        let ch = canvas.height = window.innerHeight;\n        const rand = (min, max) => (min + Math.random() * (max - min));\n        class SpeedLine {\n            constructor(x, y) {\n                this.x = x;\n                this.y = y;\n\n                this.speed = rand(1, 2);\n                this.life = this.curLife = rand(500, 900);\n                this.alpha = rand(0.25, 0.3);\n                this.angle = Math.PI * rand(0, 2);\n                this.size = rand(2, 4);\n                this.inRadius = rand(50, 300);\n                this.outRadius = cw;\n            }\n\n            update() {\n                this.curLife -= this.speed;\n                this.inRadius += this.speed * 4;\n\n                this.alpha *= (this.curLife / this.life);\n                this.size *= (this.curLife / this.life);\n\n                this.draw();\n            }\n\n            draw() {\n                const { x, y, size, angle, alpha } = this,\n                    { inRadius, outRadius } = this;\n\n                ctx.save();\n                ctx.translate(x, y);\n                ctx.rotate(angle);\n\n                ctx.beginPath();\n                ctx.moveTo(0, inRadius);\n                ctx.lineTo(size, outRadius);\n                ctx.lineTo(-size, outRadius);\n                ctx.closePath();\n\n                ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n                ctx.fill();\n                ctx.restore();\n            }\n        }\n        // Animation\n        const lines = [];\n        const MAX_LINES = 300;\n        function updateLines() {\n            lines.forEach((line, i) => {\n                if (!line || line.curLife < 0) lines[i] = new SpeedLine(cw / 2, ch / 2);\n                lines[i].update();\n            });\n        }\n        for (let i = 0; i < MAX_LINES; i++) {\n            lines[i] = new SpeedLine(cw / 2, ch / 2);\n        }\n        function animate() {\n            requestAnimationFrame(animate);\n            ctx.clearRect(0, 0, cw, ch);\n            updateLines();\n        }\n        animate();\n        // Resize\n        window.addEventListener('resize', () => {\n            cw = canvas.width = window.innerWidth;\n            ch = canvas.height = window.innerHeight;\n            updateLines();\n        });\n    }\n    render() {\n        return (\n            <div>\n                <canvas id='canvas' />\n            </div>\n        )\n    }\n}\n\nexport default index\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// Redux\nimport { connect } from \"react-redux\";\nimport { setApp, readThemeCookie, changeTheme } from \"./store/actions\";\n// i18n\nimport { Translation } from \"react-i18next\";\nimport i18n from \"i18next\";\n// Router\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n// function\nimport getCookie from \"./function/getCookie\";\nimport writeCookie from \"./function/writeCookie\";\nimport SpeedLine from './components/SpeedLine'\n\n\n\n\nclass App extends React.Component {\n  state = {\n    language: \"zhTW\"\n  };\n\n  componentDidMount() {\n    const { readThemeCookie } = this.props;\n    // 設置語言包\n    // 1. 抓取語言的Cookie\n    const language_cookie = getCookie(\"language\");\n    if (!language_cookie) {\n      // 2. 沒有語言的Cookie的話先設定預設為zhTW\n      writeCookie(\"language\", \"zhTW\");\n    } else {\n      // 3. 有語言的Cookie的話便抓取\n      const now_language_cookie = getCookie(\"language\");\n      this.setState({\n        language: now_language_cookie\n      });\n      i18n.changeLanguage(now_language_cookie);\n    }\n    readThemeCookie();\n  }\n\n  changeLanguage = () => {\n    if (this.state.language === \"zhTW\") {\n      // 修改為繁體中文\n      this.setState({\n        language: \"en\"\n      });\n      i18n.changeLanguage(\"en\");\n      writeCookie(\"language\", \"en\");\n    } else {\n      // 修改為英文\n      this.setState({\n        language: \"zhTW\"\n      });\n      i18n.changeLanguage(\"zhTW\");\n      writeCookie(\"language\", \"zhTW\");\n    }\n  };\n\n  handleChangeTheme = () => {\n    const { changeTheme, themeName } = this.props;\n    if (themeName === \"primary\") {\n      // 切換為暗色主題\n      changeTheme(\"dark\");\n    } else {\n      // 切換為亮色主題\n      changeTheme(\"primary\");\n    }\n  };\n\n  render() {\n    const { getThemeSuccessfully, themeName, themeColors } = this.props;\n    return (\n      <Router>\n        <SpeedLine />\n      </Router>\n\n    )\n  }\n}\n\nApp.propTypes = {\n  setApp: PropTypes.func,\n  setAppActive: PropTypes.bool,\n  readThemeCookie: PropTypes.func,\n  themeName: PropTypes.string,\n  themeColors: PropTypes.object,\n  getThemeSuccessfully: PropTypes.bool,\n  changeTheme: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  setAppActive: state.app.active,\n  themeName: state.app.updateTheme.themeName,\n  themeColors: state.app.updateTheme.themeColors,\n  getThemeSuccessfully: state.app.updateTheme.getThemeSuccessfully\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setApp: () => dispatch(setApp()),\n    readThemeCookie: () => dispatch(readThemeCookie()),\n    changeTheme: themeName => dispatch(changeTheme(themeName))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  getThemeSuccessfully: false,\n  themeName: \"primary\"\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case \"UPDATE_THEME\":\n      return {\n        ...state,\n        getThemeSuccessfully: true,\n        themeName: action.themeName,\n        themeColors: action.themeColors\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport updateTheme from \"./updateTheme\";\n\nconst initialState = {\n  active: true\n};\n\nconst index = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET_APP\":\n      return {\n        ...state,\n        active: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst reducers = combineReducers({\n  index,\n  updateTheme\n});\n\nexport default reducers;\n","import { combineReducers } from \"redux\";\n// import * as ActionTypes from \"../actionTypes\";\nimport app from \"./app\";\n\nconst reducers = combineReducers({\n  app\n});\n\nexport default reducers;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\nimport reducers from \"./reducers\";\n\nexport default createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport en from \"./locales/en.json\";\nimport tw from \"./locales/zhTW.json\";\n\nconst resources = {\n  en: {\n    translation: en\n  },\n  zhTW: {\n    translation: tw\n  }\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: \"zhTW\", //預設語言\n  fallbackLng: \"zhTW\", //如果當前切換的語言沒有對應的翻譯則使用這個語言，\n  interpolation: {\n    escapeValue: false\n  }\n});\nexport default i18n;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n// 載入i18n語言包設定\nimport \"./i18n\";\n// 解決 IE 瀏覽器問題的套件\nimport \"babel-polyfill\";\nimport \"isomorphic-fetch\";\nimport \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport \"core-js/features/promise\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}